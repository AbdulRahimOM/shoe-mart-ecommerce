definitions:
  entities.Brands:
    properties:
      id:
        type: integer
      name:
        type: string
      sellerID:
        type: integer
    type: object
  entities.BrandsByAlphabet:
    properties:
      alphabet:
        type: string
      brands:
        items:
          $ref: '#/definitions/entities.Brands'
        type: array
    type: object
  entities.Categories:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  entities.Coupon:
    properties:
      blocked:
        type: boolean
      code:
        type: string
      description:
        type: string
      endDate:
        type: string
      id:
        type: integer
      maxDiscount:
        type: number
      minOrderValue:
        type: number
      percentage:
        type: number
      startDate:
        type: string
      type:
        $ref: '#/definitions/entities.CouponType'
      usageLimit:
        type: integer
    type: object
  entities.CouponType:
    enum:
    - percentage
    - fixed
    type: string
    x-enum-varnames:
    - Percentage
    - Fixed
  entities.DashboardData:
    properties:
      cancelled_order_count:
        type: integer
      coupon_discounts:
        type: number
      net_original_value:
        type: number
      net_sale_value:
        type: number
      order_count:
        type: integer
      returned_order_count:
        type: integer
      sale_value_after_cancellation_and_returns:
        type: number
      users_registered:
        type: integer
    type: object
  entities.Models:
    properties:
      brandID:
        type: integer
      categoryID:
        type: integer
      fkBrand:
        $ref: '#/definitions/entities.Brands'
      fkCategory:
        $ref: '#/definitions/entities.Categories'
      id:
        type: integer
      name:
        type: string
      rating:
        type: number
    type: object
  entities.Order:
    properties:
      addressID:
        type: integer
      couponDiscount:
        type: number
      couponID:
        type: integer
      deliveredDate:
        type: string
      finalAmount:
        type: number
      fkAddress:
        allOf:
        - $ref: '#/definitions/entities.UserAddress'
        description: FkUser    User    `gorm:"foreignKey:UserID;constraint:OnDelete:CASCADE"`
      id:
        type: integer
      orderDateAndTime:
        type: string
      originalAmount:
        type: number
      paymentMethod:
        type: string
      paymentStatus:
        description: need update to notNull
        type: string
      referenceNo:
        type: string
      shippingCharge:
        type: number
      status:
        type: string
      transactionID:
        description: need update to notNull
        type: string
      userID:
        type: integer
    type: object
  entities.OrderInfo:
    properties:
      orderDetails:
        $ref: '#/definitions/entities.Order'
      orderItems:
        items:
          $ref: '#/definitions/entities.PQ'
        type: array
    type: object
  entities.PQ:
    properties:
      productID:
        type: integer
      quantity:
        type: integer
    type: object
  entities.PwMaskedSeller:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      status:
        type: string
    type: object
  entities.SalePerDay:
    properties:
      date:
        type: string
      sale:
        type: number
    type: object
  entities.UserAddress:
    properties:
      addressName:
        type: string
      city:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      landMark:
        type: string
      lastName:
        type: string
      phone:
        description: with country code
        type: string
      pincode:
        type: integer
      state:
        type: string
      street:
        type: string
      userID:
        type: integer
    type: object
  entities.UserDetails:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      status:
        type: string
    type: object
  entities.WishList:
    properties:
      id:
        type: integer
      name:
        type: string
      userID:
        type: integer
    type: object
  requestModels.AddBrandReq:
    properties:
      name:
        minLength: 3
        type: string
      sellerId:
        type: integer
    required:
    - name
    - sellerId
    type: object
  requestModels.AddCategoryReq:
    properties:
      name:
        minLength: 3
        type: string
    required:
    - name
    type: object
  requestModels.AddColourVariantReq:
    properties:
      colour:
        minLength: 3
        type: string
      modelId:
        type: integer
      mrp:
        type: number
      salePrice:
        type: number
    required:
    - colour
    - modelId
    - mrp
    - salePrice
    type: object
  requestModels.AddDimensionalVariantReq:
    properties:
      colourVariantId:
        type: integer
      dvIndex:
        type: integer
    required:
    - colourVariantId
    - dvIndex
    type: object
  requestModels.AddModelReq:
    properties:
      brandId:
        type: integer
      categoryId:
        type: integer
      name:
        minLength: 3
        type: string
    required:
    - brandId
    - categoryId
    - name
    type: object
  requestModels.AddStockReq:
    properties:
      addingStockCount:
        type: integer
      productId:
        type: integer
      sellerId:
        type: integer
    required:
    - addingStockCount
    - productId
    - sellerId
    type: object
  requestModels.AddToCartReq:
    properties:
      productID:
        type: integer
      userID:
        type: integer
    required:
    - productID
    - userID
    type: object
  requestModels.AddToWishListReq:
    properties:
      productID:
        type: integer
      wishListID:
        type: integer
    required:
    - productID
    - wishListID
    type: object
  requestModels.AddUserAddress:
    properties:
      addressName:
        minLength: 3
        type: string
      city:
        minLength: 3
        type: string
      email:
        type: string
      firstName:
        minLength: 3
        type: string
      landmark:
        minLength: 3
        type: string
      lastName:
        minLength: 3
        type: string
      phone:
        type: string
      pincode:
        type: string
      state:
        minLength: 3
        type: string
      street:
        minLength: 3
        type: string
      userId:
        type: integer
    required:
    - addressName
    - city
    - email
    - firstName
    - lastName
    - phone
    - pincode
    - state
    - street
    - userId
    type: object
  requestModels.AdminSignInReq:
    properties:
      Login_email:
        type: string
      Login_password:
        minLength: 3
        type: string
    required:
    - Login_email
    - Login_password
    type: object
  requestModels.ApplyForPasswordResetReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.BlockCouponReq:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  requestModels.BlockSellerReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.BlockUserReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.CancelOrderReq:
    properties:
      orderID:
        type: integer
    required:
    - orderID
    type: object
  requestModels.CreateWishListReq:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  requestModels.DeleteFromCartReq:
    properties:
      productID:
        type: integer
      userID:
        type: integer
    required:
    - productID
    - userID
    type: object
  requestModels.DeleteUserAddress:
    properties:
      id:
        type: integer
      userId:
        type: integer
    required:
    - id
    - userId
    type: object
  requestModels.EditBrandReq:
    properties:
      newName:
        minLength: 3
        type: string
      oldName:
        description: ID uint `json:"id" validate:"required,number"`
        minLength: 3
        type: string
      sellerId:
        type: integer
    required:
    - newName
    - oldName
    - sellerId
    type: object
  requestModels.EditCategoryReq:
    properties:
      newName:
        description: ID uint `json:"id" validate:"required,number"`
        minLength: 3
        type: string
      oldName:
        minLength: 3
        type: string
    required:
    - newName
    - oldName
    type: object
  requestModels.EditColourVariantReq:
    properties:
      colour:
        minLength: 3
        type: string
      id:
        type: integer
      modelId:
        type: integer
      mrp:
        type: number
      salePrice:
        type: number
    required:
    - colour
    - id
    - modelId
    - mrp
    - salePrice
    type: object
  requestModels.EditModelReq:
    properties:
      brandId:
        type: integer
      categoryId:
        type: integer
      id:
        type: integer
      name:
        minLength: 3
        type: string
    required:
    - brandId
    - categoryId
    - id
    - name
    type: object
  requestModels.EditProfileReq:
    properties:
      email:
        type: string
      firstName:
        minLength: 3
        type: string
      lastName:
        minLength: 3
        type: string
      phone:
        type: string
    required:
    - email
    - firstName
    - lastName
    - phone
    type: object
  requestModels.EditStockReq:
    properties:
      productId:
        type: integer
      sellerId:
        type: integer
      updatedStockCount:
        type: integer
    required:
    - productId
    - sellerId
    - updatedStockCount
    type: object
  requestModels.EditUserAddress:
    properties:
      addressName:
        minLength: 3
        type: string
      city:
        minLength: 3
        type: string
      email:
        type: string
      firstName:
        minLength: 3
        type: string
      id:
        type: integer
      landmark:
        minLength: 0
        type: string
      lastName:
        minLength: 3
        type: string
      phone:
        type: string
      pincode:
        type: string
      state:
        minLength: 3
        type: string
      street:
        minLength: 3
        type: string
      userId:
        type: integer
    required:
    - addressName
    - city
    - email
    - firstName
    - id
    - lastName
    - phone
    - pincode
    - state
    - street
    - userId
    type: object
  requestModels.MakeOrderReq:
    properties:
      addressID:
        type: integer
      couponID:
        type: integer
      paymentMethod:
        minLength: 2
        type: string
    required:
    - addressID
    - paymentMethod
    type: object
  requestModels.NewCouponReq:
    properties:
      code:
        maxLength: 15
        minLength: 3
        type: string
      description:
        maxLength: 100
        minLength: 3
        type: string
      endDate:
        type: string
      maxDiscount:
        minimum: 0
        type: number
      minOrderValue:
        minimum: 0
        type: number
      percentage:
        maximum: 100
        minimum: 0
        type: number
      startDate:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/entities.CouponType'
        enum:
        - percentage
        - fixed
      usageLimit:
        minimum: 1
        type: integer
    required:
    - code
    - endDate
    - maxDiscount
    - minOrderValue
    - startDate
    - type
    - usageLimit
    type: object
  requestModels.ProceedToPaymentReq:
    properties:
      discount:
        type: number
      email:
        type: string
      first_name:
        type: string
      order_ref_no:
        type: string
      payment_key:
        type: string
      payment_order_id:
        type: string
      phone:
        type: string
      shipping_charge:
        type: number
      total_amount:
        type: number
      total_payable_amount:
        type: number
    required:
    - email
    - first_name
    - order_ref_no
    - payment_key
    - payment_order_id
    - phone
    - total_amount
    - total_payable_amount
    type: object
  requestModels.RemoveFromWishListReq:
    properties:
      productID:
        type: integer
      wishListID:
        type: integer
    required:
    - productID
    - wishListID
    type: object
  requestModels.ResetPasswordReq:
    properties:
      newPassword:
        minLength: 3
        type: string
    required:
    - newPassword
    type: object
  requestModels.RetryPaymentReq:
    properties:
      order_id:
        type: integer
    required:
    - order_id
    type: object
  requestModels.ReturnOrderReq:
    properties:
      orderID:
        type: integer
    required:
    - orderID
    type: object
  requestModels.SellerSignInReq:
    properties:
      Login_email:
        type: string
      Login_password:
        minLength: 3
        type: string
    required:
    - Login_email
    - Login_password
    type: object
  requestModels.SellerSignUpReq:
    properties:
      SignUp_email:
        type: string
      SignUp_firstName:
        minLength: 3
        type: string
      SignUp_lastName:
        type: string
      SignUp_password:
        description: 1st password shall only be considered. Its frontend to check
          both typed passwords are same. No security implicatoions
        minLength: 3
        type: string
      SignUp_phone:
        type: string
    required:
    - SignUp_email
    - SignUp_firstName
    - SignUp_phone
    type: object
  requestModels.SetAddressForCheckOutReq:
    properties:
      addressID:
        type: integer
    required:
    - addressID
    type: object
  requestModels.SetCouponForCheckoutReq:
    properties:
      addressID:
        type: integer
      couponID:
        type: integer
    required:
    - addressID
    - couponID
    type: object
  requestModels.UnblockCouponReq:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  requestModels.UnblockSellerReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.UnblockUserReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.UserSignInReq:
    properties:
      Login_email:
        type: string
      Login_password:
        minLength: 3
        type: string
    required:
    - Login_email
    - Login_password
    type: object
  requestModels.UserSignUpReq:
    properties:
      SignUp_email:
        type: string
      SignUp_firstName:
        minLength: 3
        type: string
      SignUp_lastName:
        type: string
      SignUp_password:
        description: 1st password shall only be considered. Its frontend to check
          both typed passwords are same. No security implicatoions
        minLength: 3
        type: string
      SignUp_phone:
        type: string
    required:
    - SignUp_email
    - SignUp_firstName
    - SignUp_phone
    type: object
  requestModels.VerifyOTPReq:
    properties:
      otp:
        type: string
    required:
    - otp
    type: object
  response.BillAfterCoupon:
    properties:
      coupon:
        $ref: '#/definitions/response.ResponseCoupon'
      couponApplied:
        type: boolean
      couponDiscount:
        type: number
      grandTotal:
        type: number
      shippingCharge:
        type: number
      totalProductsValue:
        type: number
    type: object
  response.BillBeforeCoupon:
    properties:
      grandTotal:
        type: number
      shippingCharge:
        type: number
      totalProductsValue:
        type: number
    type: object
  response.CODOrderResponse:
    properties:
      error:
        type: string
      message:
        type: string
      orderInfo:
        $ref: '#/definitions/entities.OrderInfo'
      status:
        type: string
    type: object
  response.GetAddressesForCheckoutResponse:
    properties:
      addresses:
        items:
          $ref: '#/definitions/entities.UserAddress'
        type: array
      message:
        type: string
      status:
        type: string
      totalQuantiy:
        type: integer
      totalValue:
        type: number
    type: object
  response.GetAllWishListsResponse:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: string
      totalCount:
        type: integer
      wishLists:
        items:
          $ref: '#/definitions/entities.WishList'
        type: array
    type: object
  response.GetBrandsResponse:
    properties:
      brandsByAlphabet:
        items:
          $ref: '#/definitions/entities.BrandsByAlphabet'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.GetCartResponse:
    properties:
      cart:
        items:
          $ref: '#/definitions/response.ResponseCartItems'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
      totalValue:
        type: number
    type: object
  response.GetCategoriesResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/entities.Categories'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.GetColourVariantsUnderModelResponse:
    properties:
      colourVariants:
        items:
          $ref: '#/definitions/response.ResponseColourVarient'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.GetCouponRes:
    properties:
      coupons:
        items:
          $ref: '#/definitions/entities.Coupon'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.GetDashBoardDataResponse:
    properties:
      error:
        type: string
      message:
        type: string
      sale_per_day:
        items:
          $ref: '#/definitions/entities.SalePerDay'
        type: array
      sales_report:
        allOf:
        - $ref: '#/definitions/entities.DashboardData'
        description: need update
      status:
        type: string
    type: object
  response.GetModelsResponse:
    properties:
      error:
        type: string
      message:
        type: string
      models:
        items:
          $ref: '#/definitions/entities.Models'
        type: array
      status:
        type: string
    type: object
  response.GetOrdersResponse:
    properties:
      error:
        type: string
      message:
        type: string
      ordersInfo:
        items:
          $ref: '#/definitions/response.ResponseOrderInfo'
        type: array
      status:
        type: string
    type: object
  response.GetPaymentMethodsForCheckoutResponse:
    properties:
      address:
        $ref: '#/definitions/entities.UserAddress'
      billSummary:
        $ref: '#/definitions/response.BillAfterCoupon'
      codAvailability:
        type: boolean
      codAvailabilityNote:
        type: string
      message:
        type: string
      paymentMethods:
        items:
          type: string
        type: array
      status:
        type: string
      totalQuantiy:
        type: integer
      walletBalance:
        type: number
    type: object
  response.GetProfileResponse:
    properties:
      error:
        type: string
      message:
        type: string
      profile:
        properties:
          addresses:
            items:
              $ref: '#/definitions/entities.UserAddress'
            type: array
          userDetails:
            $ref: '#/definitions/entities.UserDetails'
        type: object
      status:
        type: string
    type: object
  response.GetSellersListResponse:
    properties:
      message:
        type: string
      sellersList:
        items:
          $ref: '#/definitions/entities.PwMaskedSeller'
        type: array
      status:
        type: string
    type: object
  response.GetUserAddressesResponse:
    properties:
      addresses:
        items:
          $ref: '#/definitions/entities.UserAddress'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.GetUsersListResponse:
    properties:
      message:
        type: string
      status:
        type: string
      usersList:
        items:
          $ref: '#/definitions/entities.UserDetails'
        type: array
    type: object
  response.GetWishListByIDResponse:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: string
      totalCount:
        type: integer
      wishItems:
        items:
          $ref: '#/definitions/response.ResponseProduct2'
        type: array
      wishListName:
        type: string
    type: object
  response.OnlinePaymentOrderResponse:
    properties:
      error:
        type: string
      message:
        type: string
      orderInfo:
        $ref: '#/definitions/entities.OrderInfo'
      proceedToPaymentInfo:
        $ref: '#/definitions/response.ProceedToPaymentInfo'
      status:
        type: string
    type: object
  response.PQR:
    properties:
      productID:
        type: integer
      quantity:
        type: integer
      salePriceOnOrder:
        type: number
    type: object
  response.PaidOrderResponse:
    properties:
      message:
        type: string
      order:
        $ref: '#/definitions/entities.Order'
      status:
        type: string
    type: object
  response.ProceedToPaymentInfo:
    properties:
      discount:
        type: number
      email:
        type: string
      first_name:
        type: string
      order_ref_no:
        type: string
      payment_key:
        type: string
      payment_order_id:
        type: string
      phone:
        type: string
      shipping_charge:
        type: number
      total_amount:
        type: number
      total_payable_amount:
        type: number
    type: object
  response.ResponseCartItems:
    properties:
      fkProduct:
        properties:
          name:
            type: string
          skuCode:
            type: string
          stock:
            type: integer
        type: object
      productID:
        type: integer
      quantity:
        type: integer
    type: object
  response.ResponseColourVarient:
    properties:
      colour:
        type: string
      id:
        type: integer
      modelID:
        type: integer
      mrp:
        type: number
      salePrice:
        type: number
    type: object
  response.ResponseCoupon:
    properties:
      code:
        type: string
      description:
        type: string
      id:
        type: integer
      maxDiscount:
        type: number
      minOrderValue:
        type: number
      percentage:
        type: number
      type:
        type: string
    type: object
  response.ResponseOrderInfo:
    properties:
      orderDetails:
        $ref: '#/definitions/entities.Order'
      orderItems:
        items:
          $ref: '#/definitions/response.PQR'
        type: array
    type: object
  response.ResponseProduct2:
    properties:
      id:
        type: integer
      mrp:
        description: |-
          SizeIndex              uint    `gorm:"column:sizeIndex;notNull"`
          DimensionalVariationID uint    `gorm:"column:dimensionalVariationID;notNull"`
          Stock                  uint    `gorm:"column:stock;notNull"`
        type: number
      name:
        type: string
      salePrice:
        type: number
      skucode:
        type: string
    type: object
  response.SM:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.SME:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.SMED:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.SMT:
    properties:
      message:
        type: string
      status:
        type: string
      token:
        type: string
    type: object
  response.SetAddrGetCouponsResponse:
    properties:
      address:
        $ref: '#/definitions/entities.UserAddress'
      billSummary:
        $ref: '#/definitions/response.BillBeforeCoupon'
      coupons:
        items:
          $ref: '#/definitions/response.ResponseCoupon'
        type: array
      message:
        type: string
      status:
        type: string
      totalQuantiy:
        type: integer
    type: object
  response.TopBrands:
    properties:
      brand_id:
        type: integer
      brand_name:
        type: string
      net_mrp_value_sold:
        type: number
      net_sale_amount:
        type: number
      quantity_sold:
        type: integer
      seller_name:
        type: string
    type: object
  response.TopBrandsResponse:
    properties:
      limit:
        type: integer
      status:
        type: string
      topBrands:
        items:
          $ref: '#/definitions/response.TopBrands'
        type: array
    type: object
  response.TopModels:
    properties:
      brand_name:
        type: string
      model_id:
        type: integer
      model_name:
        type: string
      net_mrp_value_sold:
        type: number
      net_sale_amount:
        type: number
      quantity_sold:
        type: integer
      seller_name:
        type: string
    type: object
  response.TopModelsResponse:
    properties:
      limit:
        type: integer
      status:
        type: string
      topModels:
        items:
          $ref: '#/definitions/response.TopModels'
        type: array
    type: object
  response.TopProducts:
    properties:
      brand_name:
        type: string
      colour_variant_id:
        type: integer
      current_mrp:
        type: number
      current_sale_price:
        type: number
      model_name:
        type: string
      net_mrp_value:
        type: number
      net_sale_amount:
        type: number
      quantity_sold:
        type: integer
      seller_name:
        type: string
    type: object
  response.TopProductsResponse:
    properties:
      limit:
        type: integer
      status:
        type: string
      topProducts:
        items:
          $ref: '#/definitions/response.TopProducts'
        type: array
    type: object
  response.TopSellers:
    properties:
      net_mrp_value_sold:
        type: number
      net_sale_amount:
        type: number
      quantity_sold:
        type: integer
      seller_id:
        type: integer
      seller_name:
        type: string
    type: object
  response.TopSellersResponse:
    properties:
      limit:
        type: integer
      status:
        type: string
      topSellers:
        items:
          $ref: '#/definitions/response.TopSellers'
        type: array
    type: object
info:
  contact: {}
  description: 'E-commerce application (Product: Shoes)'
  title: MyShoo API
  version: "1.0"
paths:
  /addaddress:
    post:
      consumes:
      - application/json
      description: Add address
      parameters:
      - description: Add Address Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddUserAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Add address
      tags:
      - User/Address
  /addresses:
    get:
      description: Get user addresses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserAddressesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get user addresses
      tags:
      - User/Address
  /addtowishlist:
    post:
      consumes:
      - application/json
      description: Add to wishlist
      parameters:
      - description: Add to WishList Request
        in: body
        name: addToWishListReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddToWishListReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Add to wishlist
      tags:
      - User/WishList
  /admin/addcategory:
    post:
      consumes:
      - application/json
      description: Add category
      parameters:
      - description: Add Category Request
        in: body
        name: addCategoryReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddCategoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Add category
      tags:
      - Admin/Product_Management/Category
  /admin/blockcoupon:
    patch:
      consumes:
      - application/json
      description: Admin can block(suspend) a coupon
      parameters:
      - description: Block Coupon Request
        in: body
        name: blockCouponReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.BlockCouponReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Block coupon
      tags:
      - Admin/Coupon
  /admin/blockseller:
    post:
      consumes:
      - application/json
      description: Block seller
      parameters:
      - description: user
        in: body
        name: blockSellerRequest
        required: true
        schema:
          $ref: '#/definitions/requestModels.BlockSellerReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Block seller
      tags:
      - Admin/Account_Management/Sellers
  /admin/blockuser:
    post:
      consumes:
      - application/json
      description: Block user
      parameters:
      - description: user
        in: body
        name: unblockUserRequest
        required: true
        schema:
          $ref: '#/definitions/requestModels.BlockUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Block user
      tags:
      - Admin/Account_Management/Users
  /admin/brands:
    get:
      description: Get brands (categorised by first alphabet)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetBrandsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get brands
      tags:
      - Admin/Product_Management/Brand
      - Seller/Product_Management/Brand
      - User/Browse
  /admin/cancelorder:
    patch:
      consumes:
      - application/json
      description: Admin can cancel an order which is not yet delivered
      parameters:
      - description: Cancel Order Request
        in: body
        name: cancelOrderReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.CancelOrderReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Cancel Order
      tags:
      - Admin/Order
  /admin/categories:
    get:
      description: Get categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get categories
      tags:
      - Admin/Product_Management/Category
      - Seller/Product_Management/Category
      - User/Browse
  /admin/colourvariants/{modelID}:
    get:
      description: Get colour variants under model
      parameters:
      - description: Model ID
        in: path
        name: modelID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetColourVariantsUnderModelResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get colour variants under model
      tags:
      - Admin/Product_Management/Colour_Variant
      - Seller/Product_Management/Colour_Variant
      - User/Browse
  /admin/coupons:
    get:
      consumes:
      - application/json
      description: Admin can get all coupons, active coupons, expired coupons, upcoming
        coupons
      parameters:
      - description: all, active, expired, upcoming
        in: query
        name: criteria
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCouponRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get coupons
      tags:
      - Admin/Coupon
  /admin/dashboarddata/{range}:
    get:
      consumes:
      - application/json
      description: Get dashboard data (for a given date range)
      parameters:
      - description: Range
        in: path
        name: range
        required: true
        type: string
      - description: Start Date
        in: query
        name: sd
        type: string
      - description: End Date
        in: query
        name: ed
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetDashBoardDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get dashboard data
      tags:
      - Admin/Analytics
  /admin/editbrand:
    patch:
      consumes:
      - application/json
      description: Edit brand
      parameters:
      - description: Edit Brand Request
        in: body
        name: editBrandReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditBrandReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Edit brand
      tags:
      - Admin/Product_Management/Brand
  /admin/editcategory:
    patch:
      consumes:
      - application/json
      description: Edit category
      parameters:
      - description: Edit Category Request
        in: body
        name: editCategoryReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditCategoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Edit category
      tags:
      - Admin/Product_Management/Category
  /admin/editcolourvariant:
    patch:
      consumes:
      - application/json
      description: Edit colour variant
      parameters:
      - description: Edit Colour Variant Request
        in: body
        name: editColourVariantReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditColourVariantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Edit colour variant
      tags:
      - Admin/Product_Management/Colour_Variant
  /admin/editmodel:
    patch:
      consumes:
      - application/json
      description: Edit model
      parameters:
      - description: Edit Model Name Request
        in: body
        name: editModelReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditModelReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerTokenAuth: []
      summary: Edit model
      tags:
      - Admin/Product_Management/Model
  /admin/login:
    get:
      consumes:
      - application/json
      description: Get admin login page
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerTokenAuth: []
      summary: Get admin login page
      tags:
      - Admin/Session
    post:
      consumes:
      - application/json
      description: Login admin
      parameters:
      - description: Admin Sign In Request
        in: body
        name: adminSignInReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AdminSignInReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Login admin
      tags:
      - Admin/Session
  /admin/markdelivery:
    patch:
      consumes:
      - application/json
      description: Admin can mark an order as delivered when it is delivered to the
        user
      parameters:
      - description: Order ID
        in: query
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Mark Order as Delivered
      tags:
      - Admin/Order
  /admin/markorderasreturned:
    patch:
      consumes:
      - application/json
      description: Admin can mark an order as returned when it is returned by the
        user and received by the admin
      parameters:
      - description: Order ID
        in: query
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Mark Order as Returned
      tags:
      - Admin/Order
  /admin/models:
    get:
      consumes:
      - application/json
      description: Get models by brands and categories
      parameters:
      - description: Brand ID
        in: query
        name: brandID
        type: string
      - description: Category ID
        in: query
        name: categoryID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetModelsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get models by brands and categories
      tags:
      - Admin/Product_Management/Model
      - Seller/Product_Management/Model
      - User/Browse
  /admin/newcoupon:
    post:
      consumes:
      - application/json
      description: Admin can add new coupon
      parameters:
      - description: New Coupon Request
        in: body
        name: newCouponReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.NewCouponReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Add new coupon
      tags:
      - Admin/Coupon
  /admin/orders:
    get:
      description: Get All Orders (for admin)
      parameters:
      - description: page number
        in: query
        name: p
        type: string
      - description: limit
        in: query
        name: l
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetOrdersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get All Orders
      tags:
      - Admin/Order
  /admin/products:
    get:
      description: Get products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMED'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get products
      tags:
      - Admin/Product_Management/Products
      - Seller/Product_Management/Products
      - User/Browse
  /admin/sellerslist:
    get:
      consumes:
      - application/json
      description: Get sellers list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSellersListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get sellers list
      tags:
      - Admin/Account_Management/Sellers
  /admin/system/restart-Configuration:
    get:
      consumes:
      - application/json
      description: Reload config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Reload config
      tags:
      - Admin/System_Related/Config
  /admin/top-brands:
    get:
      consumes:
      - application/json
      description: Get top brands
      parameters:
      - description: Limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TopBrandsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get top brands
      tags:
      - Admin/Analytics/Top_Performers
  /admin/top-models:
    get:
      consumes:
      - application/json
      description: Get top models
      parameters:
      - description: Limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TopModelsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get top models
      tags:
      - Admin/Analytics/Top_Performers
  /admin/top-products:
    get:
      consumes:
      - application/json
      description: Get top products
      parameters:
      - description: Limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TopProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get top products
      tags:
      - Admin/Analytics/Top_Performers
  /admin/top-sellers:
    get:
      consumes:
      - application/json
      description: Get top sellers
      parameters:
      - description: Limit
        in: query
        name: l
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TopSellersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get top sellers
      tags:
      - Admin/Analytics/Top_Performers
  /admin/unblockcoupon:
    patch:
      consumes:
      - application/json
      description: Admin can unblock(re-activate) a coupon
      parameters:
      - description: Unblock Coupon Request
        in: body
        name: unblockCouponReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.UnblockCouponReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Unblock coupon
      tags:
      - Admin/Coupon
  /admin/unblockseller:
    post:
      consumes:
      - application/json
      description: Unblock seller
      parameters:
      - description: user
        in: body
        name: unblockSellerRequest
        required: true
        schema:
          $ref: '#/definitions/requestModels.UnblockSellerReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Unblock seller
      tags:
      - Admin/Account_Management/Sellers
  /admin/unblockuser:
    post:
      consumes:
      - application/json
      description: Unblock user
      parameters:
      - description: user
        in: body
        name: unblockUserRequest
        required: true
        schema:
          $ref: '#/definitions/requestModels.UnblockUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Unblock user
      tags:
      - Admin/Account_Management/Users
  /admin/userslist:
    get:
      consumes:
      - application/json
      description: Get users list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUsersListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get users list
      tags:
      - Admin/Account_Management/Users
  /brands:
    get:
      description: Get brands (categorised by first alphabet)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetBrandsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get brands
      tags:
      - Admin/Product_Management/Brand
      - Seller/Product_Management/Brand
      - User/Browse
  /cancelorder:
    patch:
      consumes:
      - application/json
      description: User can cancel an order which is not yet delivered
      parameters:
      - description: Cancel Order Request
        in: body
        name: cancelOrderReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.CancelOrderReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Cancel Order
      tags:
      - User/Order
  /cart:
    delete:
      consumes:
      - application/json
      description: Delete from cart
      parameters:
      - description: Delete from Cart Request
        in: body
        name: deleteFromCartReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.DeleteFromCartReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Delete from cart
      tags:
      - User/Cart
    get:
      description: Get cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get cart
      tags:
      - User/Cart
    put:
      consumes:
      - application/json
      description: Add to cart
      parameters:
      - description: Add to Cart Request
        in: body
        name: addToCartReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddToCartReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Add to cart
      tags:
      - User/Cart
  /categories:
    get:
      description: Get categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get categories
      tags:
      - Admin/Product_Management/Category
      - Seller/Product_Management/Category
      - User/Browse
  /clearcart:
    delete:
      description: Clear cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Clear cart
      tags:
      - User/Cart
  /createwishlist:
    post:
      consumes:
      - application/json
      description: Create wishlist
      parameters:
      - description: Create WishList Request
        in: body
        name: createWishListReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.CreateWishListReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Create wishlist
      tags:
      - User/WishList
  /deleteaddress:
    delete:
      consumes:
      - application/json
      description: Delete address
      parameters:
      - description: Delete Address Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.DeleteUserAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Delete address
      tags:
      - User/Address
  /editaddress:
    patch:
      consumes:
      - application/json
      description: Edit address
      parameters:
      - description: Edit Address Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditUserAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Edit address
      tags:
      - User/Address
  /editprofile:
    patch:
      consumes:
      - application/json
      description: Edit profile
      parameters:
      - description: Edit Profile Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditProfileReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Edit profile
      tags:
      - User/Profile
  /login:
    get:
      consumes:
      - application/json
      description: Get user login page
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerTokenAuth: []
      summary: Get user login page
      tags:
      - User/Session/Login
    post:
      consumes:
      - application/json
      description: User Sign In Handler
      parameters:
      - description: User Sign In Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.UserSignInReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: User Sign In Handler
      tags:
      - User/Session/Login
  /makeorder:
    post:
      consumes:
      - application/json
      description: Make Order
      parameters:
      - description: Make Order Request
        in: body
        name: makeOrderReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.MakeOrderReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.OnlinePaymentOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Make Order
      tags:
      - User/Order
  /models:
    get:
      consumes:
      - application/json
      description: Get models by brands and categories
      parameters:
      - description: Brand ID
        in: query
        name: brandID
        type: string
      - description: Category ID
        in: query
        name: categoryID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetModelsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get models by brands and categories
      tags:
      - Admin/Product_Management/Model
      - Seller/Product_Management/Model
      - User/Browse
  /myorders:
    get:
      description: Get Orders of the user
      parameters:
      - description: page number
        in: query
        name: p
        type: string
      - description: limit
        in: query
        name: l
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetOrdersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get Orders of the user
      tags:
      - User/Order
  /mywishlists:
    get:
      consumes:
      - application/json
      description: Get all wishlists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAllWishListsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get all wishlists
      tags:
      - User/WishList
  /order-invoice:
    get:
      description: Get Invoice of an order
      parameters:
      - description: Order ID
        in: query
        name: orderID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get Invoice
      tags:
      - User/Order
  /payment:
    post:
      consumes:
      - application/json
      description: Proceed to payment
      parameters:
      - description: Proceed to Payment Request
        in: body
        name: proceedToPaymentReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.ProceedToPaymentReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Proceed to payment
      tags:
      - User/Payment
  /payment/verify:
    post:
      consumes:
      - application/json
      description: Verify payment
      parameters:
      - description: Razorpay Payment ID
        in: formData
        name: razorpay_payment_id
        required: true
        type: string
      - description: Razorpay Order ID
        in: formData
        name: razorpay_order_id
        required: true
        type: string
      - description: Razorpay Signature
        in: formData
        name: razorpay_signature
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PaidOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Verify payment
      tags:
      - User/Payment
  /profile:
    get:
      description: Get profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get profile
      tags:
      - User/Profile
  /removefromwishlist:
    delete:
      consumes:
      - application/json
      description: Remove from wishlist
      parameters:
      - description: Remove from WishList Request
        in: body
        name: removeFromWishListReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.RemoveFromWishListReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Remove from wishlist
      tags:
      - User/WishList
  /resetpassword:
    get:
      consumes:
      - application/json
      description: Get reset password
      parameters:
      - description: Apply For Password Reset Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.ApplyForPasswordResetReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get reset password
      tags:
      - User/Session/Reset_password
    post:
      consumes:
      - application/json
      description: User can provide new password after verifying OTP
      parameters:
      - description: Reset Password Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.ResetPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Reset password
      tags:
      - User/Session/Reset_password
  /resetpasswordverifyotp:
    post:
      consumes:
      - application/json
      description: Verify OTP for password change
      parameters:
      - description: Verify OTP Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.VerifyOTPReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Verify OTP for password change
      tags:
      - User/Session/Reset_password
  /retrypayment:
    post:
      consumes:
      - application/json
      description: Retry payment
      parameters:
      - description: Retry Payment Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.RetryPaymentReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Retry payment
      tags:
      - User/Payment
  /returnorder:
    patch:
      consumes:
      - application/json
      description: User can request for returning an order which is already delivered
      parameters:
      - description: Return Order Request
        in: body
        name: returnOrderReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.ReturnOrderReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Return Order
      tags:
      - User/Order
  /selectaddress:
    get:
      description: Get Address for Checkout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAddressesForCheckoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get Address for Checkout
      tags:
      - User/Cart
  /seller/addbrand:
    post:
      consumes:
      - application/json
      description: Add brand
      parameters:
      - description: Add Brand Request
        in: body
        name: addBrandReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddBrandReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Add brand
      tags:
      - Seller/Product_Management/Brand
  /seller/addcolourvariant:
    post:
      consumes:
      - application/json
      description: Add colour variant
      parameters:
      - description: Add Colour Variant Request
        in: body
        name: addColourVariantReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddColourVariantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Add colour variant
      tags:
      - Seller/Product_Management/Colour_Variant
  /seller/addmodel:
    post:
      consumes:
      - application/json
      description: Add model
      parameters:
      - description: Add Model Request
        in: body
        name: addModelReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddModelReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerTokenAuth: []
      summary: Add model
      tags:
      - Seller/Product_Management/Model
  /seller/addstock:
    post:
      consumes:
      - application/json
      description: Add stock
      parameters:
      - description: Add Stock Request
        in: body
        name: addStockReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddStockReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Add stock
      tags:
      - Seller/Product_Management/Stock
  /seller/brands:
    get:
      description: Get brands (categorised by first alphabet)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetBrandsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get brands
      tags:
      - Admin/Product_Management/Brand
      - Seller/Product_Management/Brand
      - User/Browse
  /seller/categories:
    get:
      description: Get categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get categories
      tags:
      - Admin/Product_Management/Category
      - Seller/Product_Management/Category
      - User/Browse
  /seller/editstock:
    patch:
      consumes:
      - application/json
      description: Edit stock
      parameters:
      - description: Edit Stock Request
        in: body
        name: editStockReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditStockReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Edit stock
      tags:
      - Seller/Product_Management/Stock
  /seller/login:
    get:
      consumes:
      - application/json
      description: Seller Login Page
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerTokenAuth: []
      summary: Seller Login Page
      tags:
      - Seller/Session
    post:
      consumes:
      - application/json
      description: Seller Sign In Handler
      parameters:
      - description: Seller Sign In Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.SellerSignInReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Seller Sign In Handler
      tags:
      - Seller/Session
  /seller/models:
    get:
      consumes:
      - application/json
      description: Get models by brands and categories
      parameters:
      - description: Brand ID
        in: query
        name: brandID
        type: string
      - description: Category ID
        in: query
        name: categoryID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetModelsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get models by brands and categories
      tags:
      - Admin/Product_Management/Model
      - Seller/Product_Management/Model
      - User/Browse
  /seller/products:
    get:
      description: Get products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMED'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get products
      tags:
      - Admin/Product_Management/Products
      - Seller/Product_Management/Products
      - User/Browse
  /seller/signup:
    post:
      consumes:
      - application/json
      description: Seller Sign Up Handler
      parameters:
      - description: Seller Sign Up Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.SellerSignUpReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerTokenAuth: []
      summary: Seller Sign Up Handler
      tags:
      - Seller/Session
  /sendotp:
    get:
      consumes:
      - application/json
      description: Send OTP
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Send OTP
      tags:
      - User/Session/SignUp
  /setaddr-selectcoupon:
    post:
      consumes:
      - application/json
      description: Set Address and Get Coupons
      parameters:
      - description: Set Address and Get Coupons Request
        in: body
        name: setAddGetCouponsReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.SetAddressForCheckOutReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SetAddrGetCouponsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Set Address and Get Coupons
      tags:
      - User/Cart
  /setcoupon-getpaymentmethods:
    post:
      consumes:
      - application/json
      description: Set Coupon and Get Payment Methods
      parameters:
      - description: Set Coupon and Get Payment Methods Request
        in: body
        name: setCouponGetPaymentMethodsReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.SetCouponForCheckoutReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetPaymentMethodsForCheckoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Set Coupon and Get Payment Methods
      tags:
      - User/Cart
  /signup:
    post:
      consumes:
      - application/json
      description: User Sign Up Handler
      parameters:
      - description: User Sign Up Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.UserSignUpReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: User Sign Up Handler
      tags:
      - User/Session/SignUp
  /user/products:
    get:
      description: Get products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMED'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get products
      tags:
      - Admin/Product_Management/Products
      - Seller/Product_Management/Products
      - User/Browse
  /verifyotp:
    post:
      consumes:
      - application/json
      description: Verify OTP
      parameters:
      - description: Verify OTP Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.VerifyOTPReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Verify OTP
      tags:
      - User/Session/SignUp
  /wishlist:
    get:
      consumes:
      - application/json
      description: Get wishlist by id
      parameters:
      - description: WishList ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetWishListByIDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      security:
      - BearerTokenAuth: []
      summary: Get wishlist by id
      tags:
      - User/WishList
securityDefinitions:
  BearerTokenAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
