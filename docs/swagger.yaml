definitions:
  entities.PwMaskedSeller:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      status:
        type: string
    type: object
  entities.UserAddress:
    properties:
      addressName:
        type: string
      city:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      landMark:
        type: string
      lastName:
        type: string
      phone:
        description: with country code
        type: string
      pincode:
        type: integer
      state:
        type: string
      street:
        type: string
      userID:
        type: integer
    type: object
  entities.UserDetails:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      status:
        type: string
    type: object
  requestModels.AddBrandReq:
    properties:
      name:
        minLength: 3
        type: string
      sellerId:
        type: integer
    required:
    - name
    - sellerId
    type: object
  requestModels.AddCategoryReq:
    properties:
      name:
        minLength: 3
        type: string
    required:
    - name
    type: object
  requestModels.AddColourVariantReq:
    properties:
      colour:
        minLength: 3
        type: string
      modelId:
        type: integer
      mrp:
        type: number
      salePrice:
        type: number
    required:
    - colour
    - modelId
    - mrp
    - salePrice
    type: object
  requestModels.AddModelReq:
    properties:
      brandId:
        type: integer
      categoryId:
        type: integer
      name:
        minLength: 3
        type: string
    required:
    - brandId
    - categoryId
    - name
    type: object
  requestModels.AddToCartReq:
    properties:
      productID:
        type: integer
      userID:
        type: integer
    required:
    - productID
    - userID
    type: object
  requestModels.AddUserAddress:
    properties:
      addressName:
        minLength: 3
        type: string
      city:
        minLength: 3
        type: string
      email:
        type: string
      firstName:
        minLength: 3
        type: string
      landmark:
        minLength: 3
        type: string
      lastName:
        minLength: 3
        type: string
      phone:
        type: string
      pincode:
        type: string
      state:
        minLength: 3
        type: string
      street:
        minLength: 3
        type: string
      userId:
        type: integer
    required:
    - addressName
    - city
    - email
    - firstName
    - lastName
    - phone
    - pincode
    - state
    - street
    - userId
    type: object
  requestModels.AdminSignInReq:
    properties:
      Login_email:
        type: string
      Login_password:
        minLength: 3
        type: string
    required:
    - Login_email
    - Login_password
    type: object
  requestModels.ApplyForPasswordResetReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.BlockSellerReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.BlockUserReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.DeleteFromCartReq:
    properties:
      productID:
        type: integer
      userID:
        type: integer
    required:
    - productID
    - userID
    type: object
  requestModels.DeleteUserAddress:
    properties:
      id:
        type: integer
      userId:
        type: integer
    required:
    - id
    - userId
    type: object
  requestModels.EditBrandReq:
    properties:
      newName:
        minLength: 3
        type: string
      oldName:
        description: ID uint `json:"id" validate:"required,number"`
        minLength: 3
        type: string
      sellerId:
        type: integer
    required:
    - newName
    - oldName
    - sellerId
    type: object
  requestModels.EditCategoryReq:
    properties:
      newName:
        description: ID uint `json:"id" validate:"required,number"`
        minLength: 3
        type: string
      oldName:
        minLength: 3
        type: string
    required:
    - newName
    - oldName
    type: object
  requestModels.EditModelReq:
    properties:
      brandId:
        type: integer
      categoryId:
        type: integer
      id:
        type: integer
      name:
        minLength: 3
        type: string
    required:
    - brandId
    - categoryId
    - id
    - name
    type: object
  requestModels.EditProfileReq:
    properties:
      email:
        type: string
      firstName:
        minLength: 3
        type: string
      lastName:
        minLength: 3
        type: string
      phone:
        type: string
    required:
    - email
    - firstName
    - lastName
    - phone
    type: object
  requestModels.EditUserAddress:
    properties:
      addressName:
        minLength: 3
        type: string
      city:
        minLength: 3
        type: string
      email:
        type: string
      firstName:
        minLength: 3
        type: string
      id:
        type: integer
      landmark:
        minLength: 0
        type: string
      lastName:
        minLength: 3
        type: string
      phone:
        type: string
      pincode:
        type: string
      state:
        minLength: 3
        type: string
      street:
        minLength: 3
        type: string
      userId:
        type: integer
    required:
    - addressName
    - city
    - email
    - firstName
    - id
    - lastName
    - phone
    - pincode
    - state
    - street
    - userId
    type: object
  requestModels.ResetPasswordReq:
    properties:
      newPassword:
        minLength: 3
        type: string
    required:
    - newPassword
    type: object
  requestModels.SellerSignInReq:
    properties:
      Login_email:
        type: string
      Login_password:
        minLength: 3
        type: string
    required:
    - Login_email
    - Login_password
    type: object
  requestModels.SellerSignUpReq:
    properties:
      SignUp_email:
        type: string
      SignUp_firstName:
        minLength: 3
        type: string
      SignUp_lastName:
        type: string
      SignUp_password:
        description: 1st password shall only be considered. Its frontend to check
          both typed passwords are same. No security implicatoions
        minLength: 3
        type: string
      SignUp_phone:
        type: string
    required:
    - SignUp_email
    - SignUp_firstName
    - SignUp_phone
    type: object
  requestModels.UnblockSellerReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.UnblockUserReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requestModels.UserSignInReq:
    properties:
      Login_email:
        type: string
      Login_password:
        minLength: 3
        type: string
    required:
    - Login_email
    - Login_password
    type: object
  requestModels.UserSignUpReq:
    properties:
      SignUp_email:
        type: string
      SignUp_firstName:
        minLength: 3
        type: string
      SignUp_lastName:
        type: string
      SignUp_password:
        description: 1st password shall only be considered. Its frontend to check
          both typed passwords are same. No security implicatoions
        minLength: 3
        type: string
      SignUp_phone:
        type: string
    required:
    - SignUp_email
    - SignUp_firstName
    - SignUp_phone
    type: object
  requestModels.VerifyOTPReq:
    properties:
      otp:
        type: string
    required:
    - otp
    type: object
  response.GetCartResponse:
    properties:
      cart:
        items:
          $ref: '#/definitions/response.ResponseCartItems'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
      totalValue:
        type: number
    type: object
  response.GetProfileResponse:
    properties:
      error:
        type: string
      message:
        type: string
      profile:
        properties:
          addresses:
            items:
              $ref: '#/definitions/entities.UserAddress'
            type: array
          userDetails:
            $ref: '#/definitions/entities.UserDetails'
        type: object
      status:
        type: string
    type: object
  response.GetSellersListResponse:
    properties:
      message:
        type: string
      sellersList:
        items:
          $ref: '#/definitions/entities.PwMaskedSeller'
        type: array
      status:
        type: string
    type: object
  response.GetUserAddressesResponse:
    properties:
      addresses:
        items:
          $ref: '#/definitions/entities.UserAddress'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.GetUsersListResponse:
    properties:
      message:
        type: string
      status:
        type: string
      usersList:
        items:
          $ref: '#/definitions/entities.UserDetails'
        type: array
    type: object
  response.ResponseCartItems:
    properties:
      fkProduct:
        properties:
          name:
            type: string
          skuCode:
            type: string
          stock:
            type: integer
        type: object
      productID:
        type: integer
      quantity:
        type: integer
    type: object
  response.SM:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.SME:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  response.SMT:
    properties:
      message:
        type: string
      status:
        type: string
      token:
        type: string
    type: object
info:
  contact: {}
  description: Main entry point
  title: MyShoo API
  version: "1.0"
paths:
  /addaddress:
    post:
      consumes:
      - application/json
      description: Add address
      parameters:
      - description: Add Address Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddUserAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Add address
      tags:
      - user
  /addresses:
    get:
      description: Get user addresses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserAddressesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Get user addresses
      tags:
      - user
  /admin/addbrand:
    post:
      consumes:
      - application/json
      description: Add brand
      parameters:
      - description: Add Brand Request
        in: body
        name: addBrandReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddBrandReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Add brand
      tags:
      - admin
  /admin/addcategory:
    post:
      consumes:
      - application/json
      description: Add category
      parameters:
      - description: Add Category Request
        in: body
        name: addCategoryReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddCategoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Add category
      tags:
      - admin
  /admin/addcolourvariant:
    post:
      consumes:
      - application/json
      description: Add colour variant
      parameters:
      - description: Add Colour Variant Request
        in: body
        name: addColourVariantReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddColourVariantReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Add colour variant
      tags:
      - admin
  /admin/addmodel:
    post:
      consumes:
      - application/json
      description: Add model
      parameters:
      - description: Add Model Request
        in: body
        name: addModelReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddModelReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Add model
      tags:
      - admin
  /admin/blockseller:
    post:
      consumes:
      - application/json
      description: Block seller
      parameters:
      - description: user
        in: body
        name: blockSellerRequest
        required: true
        schema:
          $ref: '#/definitions/requestModels.BlockSellerReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Block seller
      tags:
      - admin
  /admin/blockuser:
    post:
      consumes:
      - application/json
      description: Block user
      parameters:
      - description: user
        in: body
        name: unblockUserRequest
        required: true
        schema:
          $ref: '#/definitions/requestModels.BlockUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Block user
      tags:
      - admin
  /admin/editbrand:
    post:
      consumes:
      - application/json
      description: Edit brand
      parameters:
      - description: Edit Brand Request
        in: body
        name: editBrandReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditBrandReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Edit brand
      tags:
      - admin
  /admin/editcategory:
    post:
      consumes:
      - application/json
      description: Edit category
      parameters:
      - description: Edit Category Request
        in: body
        name: editCategoryReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditCategoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Edit category
      tags:
      - admin
  /admin/editmodelname:
    patch:
      consumes:
      - application/json
      description: Edit model
      parameters:
      - description: Edit Model Name Request
        in: body
        name: editModelReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditModelReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Edit model
      tags:
      - admin
  /admin/getbrands:
    get:
      consumes:
      - application/json
      description: Get brands
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Get brands
      tags:
      - admin
  /admin/getcategories:
    get:
      consumes:
      - application/json
      description: Get categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Get categories
      tags:
      - admin
  /admin/login:
    get:
      consumes:
      - application/json
      description: Get admin login page
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get admin login page
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Login admin
      parameters:
      - description: Admin Sign In Request
        in: body
        name: adminSignInReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AdminSignInReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Login admin
      tags:
      - admin
  /admin/reloadconfig:
    post:
      consumes:
      - application/json
      description: Reload config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Reload config
      tags:
      - admin
  /admin/sellerslist:
    get:
      consumes:
      - application/json
      description: Get sellers list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSellersListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Get sellers list
      tags:
      - admin
  /admin/unblockseller:
    post:
      consumes:
      - application/json
      description: Unblock seller
      parameters:
      - description: user
        in: body
        name: unblockSellerRequest
        required: true
        schema:
          $ref: '#/definitions/requestModels.UnblockSellerReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Unblock seller
      tags:
      - admin
  /admin/unblockuser:
    post:
      consumes:
      - application/json
      description: Unblock user
      parameters:
      - description: user
        in: body
        name: unblockUserRequest
        required: true
        schema:
          $ref: '#/definitions/requestModels.UnblockUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Unblock user
      tags:
      - admin
  /admin/userslist:
    get:
      consumes:
      - application/json
      description: Get users list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUsersListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Get users list
      tags:
      - admin
  /cart:
    delete:
      consumes:
      - application/json
      description: Delete from cart
      parameters:
      - description: Delete from Cart Request
        in: body
        name: deleteFromCartReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.DeleteFromCartReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Delete from cart
      tags:
      - cart
    get:
      description: Get cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCartResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Get cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Add to cart
      parameters:
      - description: Add to Cart Request
        in: body
        name: addToCartReq
        required: true
        schema:
          $ref: '#/definitions/requestModels.AddToCartReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Add to cart
      tags:
      - cart
  /deleteaddress:
    delete:
      consumes:
      - application/json
      description: Delete address
      parameters:
      - description: Delete Address Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.DeleteUserAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Delete address
      tags:
      - user
  /editaddress:
    patch:
      consumes:
      - application/json
      description: Edit address
      parameters:
      - description: Edit Address Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditUserAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Edit address
      tags:
      - user
  /editprofile:
    patch:
      consumes:
      - application/json
      description: Edit profile
      parameters:
      - description: Edit Profile Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.EditProfileReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Edit profile
      tags:
      - user
  /login:
    get:
      consumes:
      - application/json
      description: Get user login page
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get user login page
      tags:
      - user
    post:
      consumes:
      - application/json
      description: User Sign In Handler
      parameters:
      - description: User Sign In Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.UserSignInReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: User Sign In Handler
      tags:
      - user
  /profile:
    get:
      description: Get profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Get profile
      tags:
      - user
  /resetpassword:
    get:
      consumes:
      - application/json
      description: Get reset password
      parameters:
      - description: Apply For Password Reset Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.ApplyForPasswordResetReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Get reset password
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Reset password
      parameters:
      - description: Reset Password Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.ResetPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Reset password
      tags:
      - user
  /resetpasswordverifyotp:
    post:
      consumes:
      - application/json
      description: Verify OTP for password change
      parameters:
      - description: Verify OTP Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.VerifyOTPReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Verify OTP for password change
      tags:
      - user
  /seller/login:
    get:
      consumes:
      - application/json
      description: Seller Login Page
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Seller Login Page
      tags:
      - seller
    post:
      consumes:
      - application/json
      description: Seller Sign In Handler
      parameters:
      - description: Seller Sign In Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.SellerSignInReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Seller Sign In Handler
      tags:
      - seller
  /seller/signup:
    post:
      consumes:
      - application/json
      description: Seller Sign Up Handler
      parameters:
      - description: Seller Sign Up Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.SellerSignUpReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Seller Sign Up Handler
      tags:
      - seller
  /sendotp:
    get:
      consumes:
      - application/json
      description: Send OTP
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Send OTP
      tags:
      - user
  /signup:
    post:
      consumes:
      - application/json
      description: User Sign Up Handler
      parameters:
      - description: User Sign Up Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.UserSignUpReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SMT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: User Sign Up Handler
      tags:
      - user
  /verifyotp:
    post:
      consumes:
      - application/json
      description: Verify OTP
      parameters:
      - description: Verify OTP Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/requestModels.VerifyOTPReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.SME'
      summary: Verify OTP
      tags:
      - user
swagger: "2.0"
