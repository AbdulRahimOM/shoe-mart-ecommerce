// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/userUC.go

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	e "MyShoo/internal/domain/customErrors"
	entities "MyShoo/internal/domain/entities"
	request "MyShoo/internal/models/requestModels"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserUC is a mock of IUserUC interface.
type MockIUserUC struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUCMockRecorder
}

// MockIUserUCMockRecorder is the mock recorder for MockIUserUC.
type MockIUserUCMockRecorder struct {
	mock *MockIUserUC
}

// NewMockIUserUC creates a new mock instance.
func NewMockIUserUC(ctrl *gomock.Controller) *MockIUserUC {
	mock := &MockIUserUC{ctrl: ctrl}
	mock.recorder = &MockIUserUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUC) EXPECT() *MockIUserUCMockRecorder {
	return m.recorder
}

// AddUserAddress mocks base method.
func (m *MockIUserUC) AddUserAddress(req *request.AddUserAddress) *e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserAddress", req)
	ret0, _ := ret[0].(*e.Error)
	return ret0
}

// AddUserAddress indicates an expected call of AddUserAddress.
func (mr *MockIUserUCMockRecorder) AddUserAddress(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserAddress", reflect.TypeOf((*MockIUserUC)(nil).AddUserAddress), req)
}

// DeleteUserAddress mocks base method.
func (m *MockIUserUC) DeleteUserAddress(req *request.DeleteUserAddress) *e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAddress", req)
	ret0, _ := ret[0].(*e.Error)
	return ret0
}

// DeleteUserAddress indicates an expected call of DeleteUserAddress.
func (mr *MockIUserUCMockRecorder) DeleteUserAddress(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAddress", reflect.TypeOf((*MockIUserUC)(nil).DeleteUserAddress), req)
}

// EditProfile mocks base method.
func (m *MockIUserUC) EditProfile(userID uint, req *request.EditProfileReq) *e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", userID, req)
	ret0, _ := ret[0].(*e.Error)
	return ret0
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockIUserUCMockRecorder) EditProfile(userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockIUserUC)(nil).EditProfile), userID, req)
}

// EditUserAddress mocks base method.
func (m *MockIUserUC) EditUserAddress(req *request.EditUserAddress) *e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserAddress", req)
	ret0, _ := ret[0].(*e.Error)
	return ret0
}

// EditUserAddress indicates an expected call of EditUserAddress.
func (mr *MockIUserUCMockRecorder) EditUserAddress(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserAddress", reflect.TypeOf((*MockIUserUC)(nil).EditUserAddress), req)
}

// GetProfile mocks base method.
func (m *MockIUserUC) GetProfile(userID uint) (*entities.UserDetails, *e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", userID)
	ret0, _ := ret[0].(*entities.UserDetails)
	ret1, _ := ret[1].(*e.Error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIUserUCMockRecorder) GetProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIUserUC)(nil).GetProfile), userID)
}

// GetUserAddresses mocks base method.
func (m *MockIUserUC) GetUserAddresses(userID uint) (*[]entities.UserAddress, *e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddresses", userID)
	ret0, _ := ret[0].(*[]entities.UserAddress)
	ret1, _ := ret[1].(*e.Error)
	return ret0, ret1
}

// GetUserAddresses indicates an expected call of GetUserAddresses.
func (mr *MockIUserUCMockRecorder) GetUserAddresses(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddresses", reflect.TypeOf((*MockIUserUC)(nil).GetUserAddresses), userID)
}

// GetUserByEmail mocks base method.
func (m *MockIUserUC) GetUserByEmail(email string) (*entities.User, *e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(*e.Error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserUCMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserUC)(nil).GetUserByEmail), email)
}

// ResetPassword mocks base method.
func (m *MockIUserUC) ResetPassword(id uint, newPassword *string) *e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", id, newPassword)
	ret0, _ := ret[0].(*e.Error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockIUserUCMockRecorder) ResetPassword(id, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockIUserUC)(nil).ResetPassword), id, newPassword)
}

// SendOtp mocks base method.
func (m *MockIUserUC) SendOtp(phone string) *e.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOtp", phone)
	ret0, _ := ret[0].(*e.Error)
	return ret0
}

// SendOtp indicates an expected call of SendOtp.
func (mr *MockIUserUCMockRecorder) SendOtp(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOtp", reflect.TypeOf((*MockIUserUC)(nil).SendOtp), phone)
}

// SendOtpForPWChange mocks base method.
func (m *MockIUserUC) SendOtpForPWChange(arg0 *entities.User) (*string, *e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOtpForPWChange", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*e.Error)
	return ret0, ret1
}

// SendOtpForPWChange indicates an expected call of SendOtpForPWChange.
func (mr *MockIUserUCMockRecorder) SendOtpForPWChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOtpForPWChange", reflect.TypeOf((*MockIUserUC)(nil).SendOtpForPWChange), arg0)
}

// SignIn mocks base method.
func (m *MockIUserUC) SignIn(req *request.UserSignInReq) (*string, *e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*e.Error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIUserUCMockRecorder) SignIn(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIUserUC)(nil).SignIn), req)
}

// SignUp mocks base method.
func (m *MockIUserUC) SignUp(req *request.UserSignUpReq) (*string, *e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*e.Error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIUserUCMockRecorder) SignUp(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIUserUC)(nil).SignUp), req)
}

// VerifyOtp mocks base method.
func (m *MockIUserUC) VerifyOtp(phone, email, otp string) (bool, *e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtp", phone, email, otp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*e.Error)
	return ret0, ret1
}

// VerifyOtp indicates an expected call of VerifyOtp.
func (mr *MockIUserUCMockRecorder) VerifyOtp(phone, email, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtp", reflect.TypeOf((*MockIUserUC)(nil).VerifyOtp), phone, email, otp)
}

// VerifyOtpForPWChange mocks base method.
func (m *MockIUserUC) VerifyOtpForPWChange(id uint, phone, otp string) (bool, *string, *e.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtpForPWChange", id, phone, otp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(*e.Error)
	return ret0, ret1, ret2
}

// VerifyOtpForPWChange indicates an expected call of VerifyOtpForPWChange.
func (mr *MockIUserUCMockRecorder) VerifyOtpForPWChange(id, phone, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtpForPWChange", reflect.TypeOf((*MockIUserUC)(nil).VerifyOtpForPWChange), id, phone, otp)
}
